{
  "type": "excalidraw",
  "version": 2,
  "source": "https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor",
  "elements": [
    {
      "id": "OEodNxjGa9JuuWOW4Dw3o",
      "type": "text",
      "x": 324,
      "y": 153.5,
      "width": 486.93963623046875,
      "height": 25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a0",
      "roundness": null,
      "seed": 1108068658,
      "version": 53,
      "versionNonce": 1756246574,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1754805078357,
      "link": null,
      "locked": false,
      "text": "Error Handling & Building Fault Tolerance Systems",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Error Handling & Building Fault Tolerance Systems",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "MjOssGsoJSfWKJZNLEHRj",
      "type": "text",
      "x": 327,
      "y": 235,
      "width": 1238.2393798828125,
      "height": 525,
      "angle": 0,
      "strokeColor": "#2f9e44",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a1",
      "roundness": null,
      "seed": 1589185330,
      "version": 1235,
      "versionNonce": 1275053166,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1754807380301,
      "link": null,
      "locked": false,
      "text": "Types of Errors\n- 1. Logic Errors -> do wrong things -> most dangerous errors (sneaky ones -> not easily detectable)\n        - misunderstanding requirements\n        - implement algorithm incorrectly\n        - don't think about edge cases.\n- 2. Databse Errors -> simple like connection errors -> complex like deadlocks, transcation related.\n        - connection errors\n        - constraints violation\n- 3. Query errors - type or complex like joins which timeout or due to circuler dependency.\n- 4. External service errors -> clerk\n    - Network\n        - connection timeouts\n        - dns failures\n        - network partitions\n    - Authentication errors\n    - rate limiting - external services apply this as 249 TOO_MANY_REQUESTS and we need to handle this\n                    by some mechanism like populer one Exponential Backoff where it waits for some time and again send\n                    external req. and still 249 then wait for double amout of time if still 249 then wait for thrice amount of time\n                    and send req until its get done.\n    - service outage -> unavoidable error\n            for this, implement fallback -> Redis outage -> fallback to in-memory or second redis.",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Types of Errors\n- 1. Logic Errors -> do wrong things -> most dangerous errors (sneaky ones -> not easily detectable)\n        - misunderstanding requirements\n        - implement algorithm incorrectly\n        - don't think about edge cases.\n- 2. Databse Errors -> simple like connection errors -> complex like deadlocks, transcation related.\n        - connection errors\n        - constraints violation\n- 3. Query errors - type or complex like joins which timeout or due to circuler dependency.\n- 4. External service errors -> clerk\n    - Network\n        - connection timeouts\n        - dns failures\n        - network partitions\n    - Authentication errors\n    - rate limiting - external services apply this as 249 TOO_MANY_REQUESTS and we need to handle this\n                    by some mechanism like populer one Exponential Backoff where it waits for some time and again send\n                    external req. and still 249 then wait for double amout of time if still 249 then wait for thrice amount of time\n                    and send req until its get done.\n    - service outage -> unavoidable error\n            for this, implement fallback -> Redis outage -> fallback to in-memory or second redis.",
      "autoResize": true,
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}